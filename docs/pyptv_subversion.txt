PyPTV Subversion Conventions and Procedures
===========================================

Repository structure:
/trunk
	/pyptv_gui
		/test
		/parameters
	/src_c
	/docs
/experiments
/branches
/tags



Concept:
trunk: 	This is the main line of development. It should always be maintained in stable form, i.e. everything is compilable, runnable, and there are no significant crashes. As a rule of thumb, nobody should work directly on the trunk. Parallel independent work is done on branches, which later are merged into the trunk. An exception would be a tiny feature/bugfix that can safely be committed directly into the trunk. Anyway, a coordinator's (Alex) approval needs to be given for committing into the trunk.
* If this procedure turns out to impose too much overhead, it will be revised.
experiments: 	This is a folder to keep experiment data under version control.
branches: 	This folder contains feature specific, or developer specific branches. What is a branch? It is an independent line of development. At a given point of time, there is a single developer working on it.
tags: 	This folder contains copies of the trunk in noticable points of time (i.e. releases).

Each branch will keep the same structure and name convention as the /trunk for the easier re-integration, e.g.:

/branch_fix_of_owful_bug
	/pyptv_gui
	/src_c
	
Not all the sub-directories need to be present in the branch, only those under development, e.g.

/branch_write_new_doc
	/docs



Content:
- All names given (including file, class, variable, function names etc.) should be meaningful. This means "directory_dialog.DirectoyDialog()" rather than "directory_editor.demo".
- File version should not be mentioned in the its name, unless there is a really good reason. This means using pyptv.py rather than pyptv_current.py. Why? Because SVN is built to keep revision info, and trying to do so in the filename is redundant and confusing.
- Keep things simple. No redundant files/data should be committed. No deprecated files should be left in the trunk. An exception to that is if there is a good reason to maintain backward compatibility with an old implementation, that forces keeping both new and old versions of some code.



Procedure:
This describes how a developer should work on a feature/bugfix.
* Before each step, the repository should be verified to be up to date [svn update].
1. Is the change small (can be implemented fast)? Is there a chance of creating a new bug while fixing the old one?
1.1 Small change, no chance for new bug:
1.1.1 Implement the work on the trunk.
1.1.2 Test the code in the trunk.
1.1.3 Commit to the trunk (with coordinator's approval). [svn ci -m "some comment about the change"]
1.2 Big change or chance to mess something up:
1.2.1 Do you want to work on your own branch or create a new one? (don't be shy to create branches, as the cost is not very high)
1.2.1.1 Create a new branch:
1.2.1.1.1 [svn copy trunk/ branches/feature_name]
1.2.1.1.2 [svn commit branches/feature_name -m "Created a branch for feature ..."]
1.2.1.2 Use your own branch:
1.2.1.2.1 Merge the trunk into the branch: [svn merge -r <last_merged_revision>:HEAD trunk/ branches/your_branch]
1.2.1.2.2 Resolve conflicts if there are any (a good resource on how to do it is svnbook.red-bean.com)
1.2.1.2.3 [svn commit branches/your_branch -m "Merged revision <head_revision> into branch"]
1.2.2 Implement your changes. You can commit to the branch whenever you like. If a lot of time passes (in terms of revisions to the trunk), you should remerge the trunk into the branch (exactly like in 1.2.1.2.1) from time to time.
1.2.3 Before merging the branch to the trunk (which is called reintegration), you need to once again merge the trunk to the branch (again exactly like in 1.2.1.2.1).
1.2.4 Test that everything works fine. This includes your changes, and trunk basic regression testing.
1.2.5 Commit to the branch [svn commit -m "Implemented feature ..."]
1.2.6 Reintegrate the branch (this should bring branch changes to the trunk): [svn merge --reintegrate branches/your_branch]
1.2.7 Test the trunk.
1.2.8 Commit the trunk [svn commit trunk/ -m "Integrated feature ..."]


Notes:
- You need to remember the revision numbers when you last merged the trunk into a branch (This is <last_merged_revision>)
- There might be some problem with branch reintegration. I don't understand it fully. If we encounter problems, the reason might be explained at http://blogs.open.collab.net/svn/2008/07/subversion-merg.html.



Relevant links:
http://artis.imag.fr/~Xavier.Decoret/resources/svn/ (Very basic quick introduction to SVN)
http://svnbook.red-bean.com/en/1.1/ch04s03.html (How to merge branches/trunk)
http://svnbook.red-bean.com/en/1.5/svn.branchmerge.commonpatterns.html (Common patterns for branching; see feature branch->middle-of-the-road approach)
